package com.ethopia.tradecabinet.model.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.util.List;

import org.apache.cayenne.BaseDataObject;
import org.apache.cayenne.exp.Property;

import com.ethopia.tradecabinet.model.AppRole;
import com.ethopia.tradecabinet.model.AppUserGroup;

/**
 * Class _AppUser was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _AppUser extends BaseDataObject {

    private static final long serialVersionUID = 1L; 

    public static final String ID_PK_COLUMN = "id";

    public static final Property<String> EMAIL = Property.create("email", String.class);
    public static final Property<String> FIRST_NAME = Property.create("firstName", String.class);
    public static final Property<String> HASH = Property.create("hash", String.class);
    public static final Property<String> LAST_NAME = Property.create("lastName", String.class);
    public static final Property<String> USERNAME = Property.create("username", String.class);
    public static final Property<List<AppUserGroup>> APP_USER_GROUPS = Property.create("AppUserGroups", List.class);
    public static final Property<List<AppRole>> APP_USER_ROLES = Property.create("AppUserRoles", List.class);

    protected String email;
    protected String firstName;
    protected String hash;
    protected String lastName;
    protected String username;

    protected Object AppUserGroups;
    protected Object AppUserRoles;

    public void setEmail(String email) {
        beforePropertyWrite("email", this.email, email);
        this.email = email;
    }

    public String getEmail() {
        beforePropertyRead("email");
        return this.email;
    }

    public void setFirstName(String firstName) {
        beforePropertyWrite("firstName", this.firstName, firstName);
        this.firstName = firstName;
    }

    public String getFirstName() {
        beforePropertyRead("firstName");
        return this.firstName;
    }

    public void setHash(String hash) {
        beforePropertyWrite("hash", this.hash, hash);
        this.hash = hash;
    }

    public String getHash() {
        beforePropertyRead("hash");
        return this.hash;
    }

    public void setLastName(String lastName) {
        beforePropertyWrite("lastName", this.lastName, lastName);
        this.lastName = lastName;
    }

    public String getLastName() {
        beforePropertyRead("lastName");
        return this.lastName;
    }

    public void setUsername(String username) {
        beforePropertyWrite("username", this.username, username);
        this.username = username;
    }

    public String getUsername() {
        beforePropertyRead("username");
        return this.username;
    }

    public void addToAppUserGroups(AppUserGroup obj) {
        addToManyTarget("AppUserGroups", obj, true);
    }

    public void removeFromAppUserGroups(AppUserGroup obj) {
        removeToManyTarget("AppUserGroups", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<AppUserGroup> getAppUserGroups() {
        return (List<AppUserGroup>)readProperty("AppUserGroups");
    }

    public void addToAppUserRoles(AppRole obj) {
        addToManyTarget("AppUserRoles", obj, true);
    }

    public void removeFromAppUserRoles(AppRole obj) {
        removeToManyTarget("AppUserRoles", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<AppRole> getAppUserRoles() {
        return (List<AppRole>)readProperty("AppUserRoles");
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "email":
                return this.email;
            case "firstName":
                return this.firstName;
            case "hash":
                return this.hash;
            case "lastName":
                return this.lastName;
            case "username":
                return this.username;
            case "AppUserGroups":
                return this.AppUserGroups;
            case "AppUserRoles":
                return this.AppUserRoles;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "email":
                this.email = (String)val;
                break;
            case "firstName":
                this.firstName = (String)val;
                break;
            case "hash":
                this.hash = (String)val;
                break;
            case "lastName":
                this.lastName = (String)val;
                break;
            case "username":
                this.username = (String)val;
                break;
            case "AppUserGroups":
                this.AppUserGroups = val;
                break;
            case "AppUserRoles":
                this.AppUserRoles = val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeObject(this.email);
        out.writeObject(this.firstName);
        out.writeObject(this.hash);
        out.writeObject(this.lastName);
        out.writeObject(this.username);
        out.writeObject(this.AppUserGroups);
        out.writeObject(this.AppUserRoles);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.email = (String)in.readObject();
        this.firstName = (String)in.readObject();
        this.hash = (String)in.readObject();
        this.lastName = (String)in.readObject();
        this.username = (String)in.readObject();
        this.AppUserGroups = in.readObject();
        this.AppUserRoles = in.readObject();
    }

}
