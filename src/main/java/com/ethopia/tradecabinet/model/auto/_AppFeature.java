package com.ethopia.tradecabinet.model.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.util.List;

import org.apache.cayenne.BaseDataObject;
import org.apache.cayenne.exp.Property;

import com.ethopia.tradecabinet.model.AppFeatureAccess;

/**
 * Class _AppFeature was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _AppFeature extends BaseDataObject {

    private static final long serialVersionUID = 1L; 

    public static final String ID_PK_COLUMN = "id";

    public static final Property<String> DESCRIPTION = Property.create("description", String.class);
    public static final Property<String> FEATURE_CODE = Property.create("featureCode", String.class);
    public static final Property<List<AppFeatureAccess>> APPFEATUREACCESSES = Property.create("appfeatureaccesses", List.class);

    protected String description;
    protected String featureCode;

    protected Object appfeatureaccesses;

    public void setDescription(String description) {
        beforePropertyWrite("description", this.description, description);
        this.description = description;
    }

    public String getDescription() {
        beforePropertyRead("description");
        return this.description;
    }

    public void setFeatureCode(String featureCode) {
        beforePropertyWrite("featureCode", this.featureCode, featureCode);
        this.featureCode = featureCode;
    }

    public String getFeatureCode() {
        beforePropertyRead("featureCode");
        return this.featureCode;
    }

    public void addToAppfeatureaccesses(AppFeatureAccess obj) {
        addToManyTarget("appfeatureaccesses", obj, true);
    }

    public void removeFromAppfeatureaccesses(AppFeatureAccess obj) {
        removeToManyTarget("appfeatureaccesses", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<AppFeatureAccess> getAppfeatureaccesses() {
        return (List<AppFeatureAccess>)readProperty("appfeatureaccesses");
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "description":
                return this.description;
            case "featureCode":
                return this.featureCode;
            case "appfeatureaccesses":
                return this.appfeatureaccesses;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "description":
                this.description = (String)val;
                break;
            case "featureCode":
                this.featureCode = (String)val;
                break;
            case "appfeatureaccesses":
                this.appfeatureaccesses = val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeObject(this.description);
        out.writeObject(this.featureCode);
        out.writeObject(this.appfeatureaccesses);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.description = (String)in.readObject();
        this.featureCode = (String)in.readObject();
        this.appfeatureaccesses = in.readObject();
    }

}
