package com.ethopia.tradecabinet.model.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;

import org.apache.cayenne.BaseDataObject;
import org.apache.cayenne.exp.Property;

import com.ethopia.tradecabinet.model.AppUser;
import com.ethopia.tradecabinet.model.AppUserGroup;

/**
 * Class _AppUserGroupMap was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _AppUserGroupMap extends BaseDataObject {

    private static final long serialVersionUID = 1L; 

    public static final String ID_PK_COLUMN = "id";

    public static final Property<AppUser> APPUSER = Property.create("appuser", AppUser.class);
    public static final Property<AppUserGroup> APPUSERGROUP = Property.create("appusergroup", AppUserGroup.class);


    protected Object appuser;
    protected Object appusergroup;

    public void setAppuser(AppUser appuser) {
        setToOneTarget("appuser", appuser, true);
    }

    public AppUser getAppuser() {
        return (AppUser)readProperty("appuser");
    }

    public void setAppusergroup(AppUserGroup appusergroup) {
        setToOneTarget("appusergroup", appusergroup, true);
    }

    public AppUserGroup getAppusergroup() {
        return (AppUserGroup)readProperty("appusergroup");
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "appuser":
                return this.appuser;
            case "appusergroup":
                return this.appusergroup;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "appuser":
                this.appuser = val;
                break;
            case "appusergroup":
                this.appusergroup = val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeObject(this.appuser);
        out.writeObject(this.appusergroup);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.appuser = in.readObject();
        this.appusergroup = in.readObject();
    }

}
