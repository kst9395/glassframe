package com.ethopia.tradecabinet.model.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.util.List;

import org.apache.cayenne.BaseDataObject;
import org.apache.cayenne.exp.Property;

import com.ethopia.tradecabinet.model.AppGroupRole;
import com.ethopia.tradecabinet.model.AppUserGroupMap;

/**
 * Class _AppUserGroup was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _AppUserGroup extends BaseDataObject {

    private static final long serialVersionUID = 1L; 

    public static final String ID_PK_COLUMN = "id";

    public static final Property<String> DESCRIPTION = Property.create("description", String.class);
    public static final Property<String> GROUP_NAME = Property.create("groupName", String.class);
    public static final Property<List<AppGroupRole>> APPGROUPROLES = Property.create("appgrouproles", List.class);
    public static final Property<List<AppUserGroupMap>> APPUSERGROUPMAPS = Property.create("appusergroupmaps", List.class);

    protected String description;
    protected String groupName;

    protected Object appgrouproles;
    protected Object appusergroupmaps;

    public void setDescription(String description) {
        beforePropertyWrite("description", this.description, description);
        this.description = description;
    }

    public String getDescription() {
        beforePropertyRead("description");
        return this.description;
    }

    public void setGroupName(String groupName) {
        beforePropertyWrite("groupName", this.groupName, groupName);
        this.groupName = groupName;
    }

    public String getGroupName() {
        beforePropertyRead("groupName");
        return this.groupName;
    }

    public void addToAppgrouproles(AppGroupRole obj) {
        addToManyTarget("appgrouproles", obj, true);
    }

    public void removeFromAppgrouproles(AppGroupRole obj) {
        removeToManyTarget("appgrouproles", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<AppGroupRole> getAppgrouproles() {
        return (List<AppGroupRole>)readProperty("appgrouproles");
    }

    public void addToAppusergroupmaps(AppUserGroupMap obj) {
        addToManyTarget("appusergroupmaps", obj, true);
    }

    public void removeFromAppusergroupmaps(AppUserGroupMap obj) {
        removeToManyTarget("appusergroupmaps", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<AppUserGroupMap> getAppusergroupmaps() {
        return (List<AppUserGroupMap>)readProperty("appusergroupmaps");
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "description":
                return this.description;
            case "groupName":
                return this.groupName;
            case "appgrouproles":
                return this.appgrouproles;
            case "appusergroupmaps":
                return this.appusergroupmaps;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "description":
                this.description = (String)val;
                break;
            case "groupName":
                this.groupName = (String)val;
                break;
            case "appgrouproles":
                this.appgrouproles = val;
                break;
            case "appusergroupmaps":
                this.appusergroupmaps = val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeObject(this.description);
        out.writeObject(this.groupName);
        out.writeObject(this.appgrouproles);
        out.writeObject(this.appusergroupmaps);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.description = (String)in.readObject();
        this.groupName = (String)in.readObject();
        this.appgrouproles = in.readObject();
        this.appusergroupmaps = in.readObject();
    }

}
