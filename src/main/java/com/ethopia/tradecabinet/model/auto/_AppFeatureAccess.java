package com.ethopia.tradecabinet.model.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;

import org.apache.cayenne.BaseDataObject;
import org.apache.cayenne.exp.Property;

import com.ethopia.tradecabinet.model.AppFeature;
import com.ethopia.tradecabinet.model.AppRole;

/**
 * Class _AppFeatureAccess was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _AppFeatureAccess extends BaseDataObject {

    private static final long serialVersionUID = 1L; 

    public static final String ID_PK_COLUMN = "id";

    public static final Property<AppFeature> FEATURE = Property.create("feature", AppFeature.class);
    public static final Property<AppRole> ROLE = Property.create("role", AppRole.class);


    protected Object feature;
    protected Object role;

    public void setFeature(AppFeature feature) {
        setToOneTarget("feature", feature, true);
    }

    public AppFeature getFeature() {
        return (AppFeature)readProperty("feature");
    }

    public void setRole(AppRole role) {
        setToOneTarget("role", role, true);
    }

    public AppRole getRole() {
        return (AppRole)readProperty("role");
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "feature":
                return this.feature;
            case "role":
                return this.role;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "feature":
                this.feature = val;
                break;
            case "role":
                this.role = val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeObject(this.feature);
        out.writeObject(this.role);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.feature = in.readObject();
        this.role = in.readObject();
    }

}
